name: PRS Deploy

on:
  push:
    branches:
      - main
    paths:
      - coreservices/partsrelationshipservice/**
      - .github/workflows/partsrelationshipservice-deploy.yml

  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment for resources'
        required: true
        default: 'dev'

concurrency: partsrelationshipservice-infra

jobs:
  configure:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: coreservices/partsrelationshipservice
    env:
      # Default environment (overridden when run manually)
      ENVIRONMENT: dev
    steps:
      - uses: actions/checkout@v2
      - name: "Configure environment (manual run only)"
        if: ${{ github.event_name == 'workflow_dispatch'}}
        run: |
          echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
      - id: get-dataspace-partitions
        run: |
          set -euo pipefail # safe mode
          dataspace_partitions=$(jq -c .partitions cd/dataspace-partitions.json)
          echo "::set-output name=dataspace_partitions::$dataspace_partitions"
    outputs:
      dataspace_partitions: ${{ steps.get-dataspace-partitions.outputs.dataspace_partitions }}
      environment: ${{ env.ENVIRONMENT }}
      image_tag: ${{ github.run_id }}

  build_images:
    needs:
    - configure
    strategy:
      matrix:
        image:
          - prs-api
          - broker-proxy
          - prs-connector-consumer
          - prs-connector-provider
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: coreservices/partsrelationshipservice
    steps:
      - uses: actions/checkout@v2
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Cache maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: build-${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: "Build and push MTPDC images to ACR"
        run: |
          set -euo pipefail # safe mode
          source cd/environments/${{ needs.configure.outputs.environment }}.sh
          cd/build_and_push_docker.sh "$TF_VAR_image_registry" "${{ matrix.image }}" "${{ needs.configure.outputs.image_tag }}"
        env:
          PRS_EDC_PKG_USERNAME: ${{ secrets.PRS_EDC_PKG_USERNAME }}
          PRS_EDC_PKG_PASSWORD: ${{ secrets.PRS_EDC_PKG_PASSWORD }}

  infra_common:
    needs:
    - configure
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: coreservices/partsrelationshipservice/cd/terraform-common
    steps:
      - uses: actions/checkout@v2
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Run Terraform
        id: terraform
        run: ../run-terraform.sh
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          TERRAFORM_STATE_BLOB: mtpdc.${{ needs.configure.outputs.environment }}.tfstate
          TERRAFORM_VARS: ../environments/${{ needs.configure.outputs.environment }}.sh
    outputs:
      application_insights_name: ${{ steps.terraform.outputs.application_insights_name }}

  infra_partitions:
    needs:
    - configure
    - build_images
    - infra_common
    strategy:
      # avoid stopping concurrent jobs (leaving Terraform state potentially corrupted/leased) on job failure
      fail-fast: false
      matrix:
        partition: ${{ fromJSON(needs.configure.outputs.dataspace_partitions) }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: coreservices/partsrelationshipservice
    env:
      # Variables prefixed with TF_VAR_ are automatically picked up as Terraform inputs
      TF_VAR_dataspace_partition: ${{ matrix.partition.key }}
      TF_VAR_image_tag: ${{ needs.configure.outputs.image_tag }}
      TF_VAR_application_insights_name: ${{ needs.infra_common.outputs.application_insights_name }}
    steps:
      - uses: actions/checkout@v2
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Run Terraform
        run: ../run-terraform.sh
        working-directory: coreservices/partsrelationshipservice/cd/terraform-dataspace-partition
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          TERRAFORM_STATE_BLOB: mtpdc.${{ needs.configure.outputs.environment }}.${{ matrix.partition.key }}.tfstate
          TERRAFORM_VARS: ../environments/${{ needs.configure.outputs.environment }}.sh

      - name: Cache maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: smoke-${{ matrix.partition.key}}-${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run smoke tests
        run: |
          set -euo pipefail # safe mode
          api_url=$(jq -r .api_url.value cd/terraform-dataspace-partition/terraform-outputs.json)
          mvn --batch-mode --update-snapshots -s settings.xml -Dgroups=SmokeTests test -DbaseURI=$api_url
        env:
          PRS_EDC_PKG_USERNAME: ${{ secrets.PRS_EDC_PKG_USERNAME }}
          PRS_EDC_PKG_PASSWORD: ${{ secrets.PRS_EDC_PKG_PASSWORD }}

      - name: Archive terraform-outputs artifact
        uses: actions/upload-artifact@v2
        with:
          name: terraform-outputs-${{ matrix.partition.key }}
          path: coreservices/partsrelationshipservice/cd/terraform-dataspace-partition/terraform-outputs-safe.json

      - name: "Load test data"
        run: |
          set -euo pipefail # safe mode
          outputs=cd/terraform-dataspace-partition/terraform-outputs.json
          export POSTGRES_USER=$(jq -r .prs_db_administrator_username.value $outputs)
          export POSTGRES_PASSWORD=$(jq -r .prs_db_administrator_login_password.value $outputs)
          export POSTGRES_HOST=$(jq -r .prs_db_fqdn.value $outputs)
          export POSTGRES_DB=$(jq -r .prs_db_name.value $outputs)
          export ENVIRONMENT=${{ needs.configure.outputs.environment }}
          pushd cd/test-data
            ./load-test-data.sh

  infra_connector_consumer:
    needs:
      - configure
      - build_images
      - infra_common
      - infra_partitions
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: coreservices/partsrelationshipservice
    steps:
      - uses: actions/checkout@v2
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v2
        with:
          path: coreservices/partsrelationshipservice

      - name: "Build index of dataspace URLs"
        run: |
          jq -s 'INDEX(.dataspace_partition.value)' terraform-outputs-*/terraform-outputs-safe.json > dev/local/dataspace-deployments.json

      - name: Archive dataspace-deployments artifact
        uses: actions/upload-artifact@v2
        with:
          name: dataspace-deployments
          path: coreservices/partsrelationshipservice/dev/local/dataspace-deployments.json

      - name: Run Terraform
        run: ../run-terraform.sh
        working-directory: coreservices/partsrelationshipservice/cd/terraform-connector-consumer
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          TERRAFORM_STATE_BLOB: mtpdc.consumer.${{ needs.configure.outputs.environment }}.tfstate
          TERRAFORM_VARS: ../environments/${{ needs.configure.outputs.environment }}.sh
          TF_VAR_image_tag: ${{ needs.configure.outputs.image_tag }} # Image tag of connectors
          TF_VAR_application_insights_name: ${{ needs.infra_common.outputs.application_insights_name }}

  system_test:
    needs:
    - configure
    - infra_connector_consumer
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: coreservices/partsrelationshipservice
    env:
      ENVIRONMENT: ${{ needs.configure.outputs.environment }}
    steps:
      - uses: actions/checkout@v2

      - name: Download dataspace-deployments artifact
        uses: actions/download-artifact@v2
        with:
          name: dataspace-deployments
          path: coreservices/partsrelationshipservice/dev/local

      - run: |
          . cd/environments/$ENVIRONMENT.sh
          echo "TF_VAR_aks_cluster_name=$TF_VAR_aks_cluster_name" >> $GITHUB_ENV
          echo "TF_VAR_resource_group_name=$TF_VAR_resource_group_name" >> $GITHUB_ENV

      # Set the target Azure Kubernetes Service (AKS) cluster.
      - uses: azure/aks-set-context@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
          cluster-name: ${{ env.TF_VAR_aks_cluster_name }}
          resource-group: ${{ env.TF_VAR_resource_group_name }}

      - name: Cache maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: systemtest-${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: "Run system tests"
        run: |
          set -euo pipefail # safe mode
          mvn --batch-mode --update-snapshots -s settings.xml -Dgroups=SystemTests test -Denvironment=$ENVIRONMENT
        env:
          PRS_EDC_PKG_USERNAME: ${{ secrets.PRS_EDC_PKG_USERNAME }}
          PRS_EDC_PKG_PASSWORD: ${{ secrets.PRS_EDC_PKG_PASSWORD }}

      - name: Archive performance tests report
        uses: actions/upload-artifact@v2
        with:
          name: performance-tests-report
          path: coreservices/partsrelationshipservice/integration-tests/target/gatling/*/
