/*
 * Dataspace Connector
 * IDS Connector originally developed by the Fraunhofer ISST
 *
 * OpenAPI spec version: 6.2.0
 * Contact: info@dataspace-connector.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package net.catenax.semantics.framework.dsc.client.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonValue;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Constraint
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-09-08T16:15:16.333286600+02:00[Europe/Berlin]")@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "_atType", visible = true )
@JsonSubTypes({
})

public class Constraint extends AbstractConstraint implements OneOfRuleIdsassetRefinement {
  /**
   * Gets or Sets idsleftOperand
   */
  public enum IdsleftOperandEnum {
    ABSOLUTE_SPATIAL_POSITION("https://w3id.org/idsa/code/ABSOLUTE_SPATIAL_POSITION"),
    COUNT("https://w3id.org/idsa/code/COUNT"),
    DELAY("https://w3id.org/idsa/code/DELAY"),
    ELAPSED_TIME("https://w3id.org/idsa/code/ELAPSED_TIME"),
    ENDPOINT("https://w3id.org/idsa/code/ENDPOINT"),
    EVENT("https://w3id.org/idsa/code/EVENT"),
    PATH("https://w3id.org/idsa/code/PATH"),
    PAYMENT("https://w3id.org/idsa/code/PAYMENT"),
    PAY_AMOUNT("https://w3id.org/idsa/code/PAY_AMOUNT"),
    POLICY_EVALUATION_TIME("https://w3id.org/idsa/code/POLICY_EVALUATION_TIME"),
    PURPOSE("https://w3id.org/idsa/code/PURPOSE"),
    QUANTITY("https://w3id.org/idsa/code/QUANTITY"),
    RECURRENCE_RATE("https://w3id.org/idsa/code/RECURRENCE_RATE"),
    SECURITY_LEVEL("https://w3id.org/idsa/code/SECURITY_LEVEL"),
    STATE("https://w3id.org/idsa/code/STATE"),
    SYSTEM("https://w3id.org/idsa/code/SYSTEM"),
    USER("https://w3id.org/idsa/code/USER");

    private String value;

    IdsleftOperandEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static IdsleftOperandEnum fromValue(String text) {
      for (IdsleftOperandEnum b : IdsleftOperandEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("ids:leftOperand")
  private IdsleftOperandEnum idsleftOperand = null;

  @JsonProperty("ids:rightOperand")
  private RdfResource idsrightOperand = null;

  @JsonProperty("ids:rightOperandReference")
  private String idsrightOperandReference = null;

  @JsonProperty("ids:unit")
  private String idsunit = null;

  @JsonProperty("ids:pipEndpoint")
  private String idspipEndpoint = null;

  /**
   * Gets or Sets idsoperator
   */
  public enum IdsoperatorEnum {
    AFTER("https://w3id.org/idsa/code/AFTER"),
    BEFORE("https://w3id.org/idsa/code/BEFORE"),
    CONTAINS("https://w3id.org/idsa/code/CONTAINS"),
    COVERED_BY("https://w3id.org/idsa/code/COVERED_BY"),
    COVERS("https://w3id.org/idsa/code/COVERS"),
    DEFINES_AS("https://w3id.org/idsa/code/DEFINES_AS"),
    DISJOINT("https://w3id.org/idsa/code/DISJOINT"),
    DURATION_EQ("https://w3id.org/idsa/code/DURATION_EQ"),
    DURING("https://w3id.org/idsa/code/DURING"),
    EQ("https://w3id.org/idsa/code/EQ"),
    EQUALS("https://w3id.org/idsa/code/EQUALS"),
    FINISHED_BY("https://w3id.org/idsa/code/FINISHED_BY"),
    FINISHES("https://w3id.org/idsa/code/FINISHES"),
    GT("https://w3id.org/idsa/code/GT"),
    GTEQ("https://w3id.org/idsa/code/GTEQ"),
    HAS_MEMBERSHIP("https://w3id.org/idsa/code/HAS_MEMBERSHIP"),
    HAS_SITE("https://w3id.org/idsa/code/HAS_SITE"),
    HAS_STATE("https://w3id.org/idsa/code/HAS_STATE"),
    IN("https://w3id.org/idsa/code/IN"),
    INSIDE("https://w3id.org/idsa/code/INSIDE"),
    INSIDE_NETWORK("https://w3id.org/idsa/code/INSIDE_NETWORK"),
    LONGER("https://w3id.org/idsa/code/LONGER"),
    LONGER_EQ("https://w3id.org/idsa/code/LONGER_EQ"),
    LT("https://w3id.org/idsa/code/LT"),
    LTEQ("https://w3id.org/idsa/code/LTEQ"),
    MATCHES("https://w3id.org/idsa/code/MATCHES"),
    MEETS("https://w3id.org/idsa/code/MEETS"),
    MEMBER_OF("https://w3id.org/idsa/code/MEMBER_OF"),
    MET_BY("https://w3id.org/idsa/code/MET_BY"),
    NOT("https://w3id.org/idsa/code/NOT"),
    OVERLAPPED_BY("https://w3id.org/idsa/code/OVERLAPPED_BY"),
    OVERLAPS("https://w3id.org/idsa/code/OVERLAPS"),
    SAME_AS("https://w3id.org/idsa/code/SAME_AS"),
    SHORTER("https://w3id.org/idsa/code/SHORTER"),
    SHORTER_EQ("https://w3id.org/idsa/code/SHORTER_EQ"),
    SPATIAL_CONTAINS("https://w3id.org/idsa/code/SPATIAL_CONTAINS"),
    SPATIAL_EQUALS("https://w3id.org/idsa/code/SPATIAL_EQUALS"),
    SPATIAL_MEET("https://w3id.org/idsa/code/SPATIAL_MEET"),
    SPATIAL_OVERLAP("https://w3id.org/idsa/code/SPATIAL_OVERLAP"),
    STARTED_BY("https://w3id.org/idsa/code/STARTED_BY"),
    STARTS("https://w3id.org/idsa/code/STARTS"),
    STRING_CONTAINS("https://w3id.org/idsa/code/STRING_CONTAINS"),
    STRING_EQ("https://w3id.org/idsa/code/STRING_EQ"),
    STRING_IS_CONTAINED("https://w3id.org/idsa/code/STRING_IS_CONTAINED"),
    TEMPORAL_DISJOINT("https://w3id.org/idsa/code/TEMPORAL_DISJOINT"),
    TEMPORAL_EQUALS("https://w3id.org/idsa/code/TEMPORAL_EQUALS");

    private String value;

    IdsoperatorEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static IdsoperatorEnum fromValue(String text) {
      for (IdsoperatorEnum b : IdsoperatorEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("ids:operator")
  private IdsoperatorEnum idsoperator = null;

  @JsonProperty("@type")
  private String _atType = null;

  public Constraint idsleftOperand(IdsleftOperandEnum idsleftOperand) {
    this.idsleftOperand = idsleftOperand;
    return this;
  }

   /**
   * Get idsleftOperand
   * @return idsleftOperand
  **/
  @Schema(required = true, description = "")
  public IdsleftOperandEnum getIdsleftOperand() {
    return idsleftOperand;
  }

  public void setIdsleftOperand(IdsleftOperandEnum idsleftOperand) {
    this.idsleftOperand = idsleftOperand;
  }

  public Constraint idsrightOperand(RdfResource idsrightOperand) {
    this.idsrightOperand = idsrightOperand;
    return this;
  }

   /**
   * Get idsrightOperand
   * @return idsrightOperand
  **/
  @Schema(description = "")
  public RdfResource getIdsrightOperand() {
    return idsrightOperand;
  }

  public void setIdsrightOperand(RdfResource idsrightOperand) {
    this.idsrightOperand = idsrightOperand;
  }

  public Constraint idsrightOperandReference(String idsrightOperandReference) {
    this.idsrightOperandReference = idsrightOperandReference;
    return this;
  }

   /**
   * Get idsrightOperandReference
   * @return idsrightOperandReference
  **/
  @Schema(description = "")
  public String getIdsrightOperandReference() {
    return idsrightOperandReference;
  }

  public void setIdsrightOperandReference(String idsrightOperandReference) {
    this.idsrightOperandReference = idsrightOperandReference;
  }

  public Constraint idsunit(String idsunit) {
    this.idsunit = idsunit;
    return this;
  }

   /**
   * Get idsunit
   * @return idsunit
  **/
  @Schema(description = "")
  public String getIdsunit() {
    return idsunit;
  }

  public void setIdsunit(String idsunit) {
    this.idsunit = idsunit;
  }

  public Constraint idspipEndpoint(String idspipEndpoint) {
    this.idspipEndpoint = idspipEndpoint;
    return this;
  }

   /**
   * Get idspipEndpoint
   * @return idspipEndpoint
  **/
  @Schema(description = "")
  public String getIdspipEndpoint() {
    return idspipEndpoint;
  }

  public void setIdspipEndpoint(String idspipEndpoint) {
    this.idspipEndpoint = idspipEndpoint;
  }

  public Constraint idsoperator(IdsoperatorEnum idsoperator) {
    this.idsoperator = idsoperator;
    return this;
  }

   /**
   * Get idsoperator
   * @return idsoperator
  **/
  @Schema(required = true, description = "")
  public IdsoperatorEnum getIdsoperator() {
    return idsoperator;
  }

  public void setIdsoperator(IdsoperatorEnum idsoperator) {
    this.idsoperator = idsoperator;
  }

  public Constraint _atType(String _atType) {
    this._atType = _atType;
    return this;
  }

   /**
   * Get _atType
   * @return _atType
  **/
  @Schema(required = true, description = "")
  public String getAtType() {
    return _atType;
  }

  public void setAtType(String _atType) {
    this._atType = _atType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Constraint constraint = (Constraint) o;
    return Objects.equals(this.idsleftOperand, constraint.idsleftOperand) &&
        Objects.equals(this.idsrightOperand, constraint.idsrightOperand) &&
        Objects.equals(this.idsrightOperandReference, constraint.idsrightOperandReference) &&
        Objects.equals(this.idsunit, constraint.idsunit) &&
        Objects.equals(this.idspipEndpoint, constraint.idspipEndpoint) &&
        Objects.equals(this.idsoperator, constraint.idsoperator) &&
        Objects.equals(this._atType, constraint._atType) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(idsleftOperand, idsrightOperand, idsrightOperandReference, idsunit, idspipEndpoint, idsoperator, _atType, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Constraint {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    idsleftOperand: ").append(toIndentedString(idsleftOperand)).append("\n");
    sb.append("    idsrightOperand: ").append(toIndentedString(idsrightOperand)).append("\n");
    sb.append("    idsrightOperandReference: ").append(toIndentedString(idsrightOperandReference)).append("\n");
    sb.append("    idsunit: ").append(toIndentedString(idsunit)).append("\n");
    sb.append("    idspipEndpoint: ").append(toIndentedString(idspipEndpoint)).append("\n");
    sb.append("    idsoperator: ").append(toIndentedString(idsoperator)).append("\n");
    sb.append("    _atType: ").append(toIndentedString(_atType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
