/*
 * Dataspace Connector
 * IDS Connector originally developed by the Fraunhofer ISST
 *
 * OpenAPI spec version: 6.2.0
 * Contact: info@dataspace-connector.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package net.catenax.semantics.idsadapter.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * PatternDesc
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-09-08T16:15:16.333286600+02:00[Europe/Berlin]")@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true )
@JsonSubTypes({
  @JsonSubTypes.Type(value = DurationDesc.class, name = "DurationDesc"),
  @JsonSubTypes.Type(value = IntervalDesc.class, name = "IntervalDesc"),
  @JsonSubTypes.Type(value = ProhibitionDesc.class, name = "ProhibitionDesc"),
  @JsonSubTypes.Type(value = PermissionDesc.class, name = "PermissionDesc"),
  @JsonSubTypes.Type(value = ConnectorRestrictionDesc.class, name = "ConnectorRestrictionDesc"),
  @JsonSubTypes.Type(value = LoggingDesc.class, name = "LoggingDesc"),
  @JsonSubTypes.Type(value = SecurityRestrictionDesc.class, name = "SecurityRestrictionDesc"),
  @JsonSubTypes.Type(value = UsageNumberDesc.class, name = "UsageNumberDesc"),
  @JsonSubTypes.Type(value = DeletionDesc.class, name = "DeletionDesc"),
  @JsonSubTypes.Type(value = NotificationDesc.class, name = "NotificationDesc"),
})

public class PatternDesc implements OneOfexamplesPolicyBody {
  @JsonProperty("title")
  private String title = null;

  @JsonProperty("description")
  private String description = null;

  @JsonTypeId
  private String type = null;

  public PatternDesc title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @Schema(description = "")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public PatternDesc description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public PatternDesc type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(required = true, description = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatternDesc patternDesc = (PatternDesc) o;
    return Objects.equals(this.title, patternDesc.title) &&
        Objects.equals(this.description, patternDesc.description) &&
        Objects.equals(this.type, patternDesc.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, description, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatternDesc {\n");
    
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
