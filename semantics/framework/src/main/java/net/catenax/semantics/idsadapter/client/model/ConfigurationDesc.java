/*
 * Dataspace Connector
 * IDS Connector originally developed by the Fraunhofer ISST
 *
 * OpenAPI spec version: 6.2.0
 * Contact: info@dataspace-connector.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package net.catenax.semantics.idsadapter.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

import io.swagger.v3.oas.annotations.media.Schema;
import net.catenax.semantics.idsadapter.client.model.KeystoreDesc;
import net.catenax.semantics.idsadapter.client.model.ProxyDesc;
import net.catenax.semantics.idsadapter.client.model.TruststoreDesc;

import java.util.ArrayList;
import java.util.List;
/**
 * ConfigurationDesc
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-09-08T16:15:16.333286600+02:00[Europe/Berlin]")
public class ConfigurationDesc {
  @JsonProperty("title")
  private String title = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("connectorId")
  private String connectorId = null;

  @JsonProperty("defaultEndpoint")
  private String defaultEndpoint = null;

  @JsonProperty("version")
  private String version = null;

  @JsonProperty("curator")
  private String curator = null;

  @JsonProperty("maintainer")
  private String maintainer = null;

  @JsonProperty("inboundModelVersion")
  private List<String> inboundModelVersion = null;

  @JsonProperty("outboundModelVersion")
  private String outboundModelVersion = null;

  /**
   * Gets or Sets securityProfile
   */
  public enum SecurityProfileEnum {
    BASE_SECURITY("Base Security"),
    TRUST_PLUS_SECURITY("Trust Plus Security"),
    TRUST_SECURITY("Trust Security");

    private String value;

    SecurityProfileEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static SecurityProfileEnum fromValue(String text) {
      for (SecurityProfileEnum b : SecurityProfileEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("securityProfile")
  private SecurityProfileEnum securityProfile = null;

  /**
   * Gets or Sets logLevel
   */
  public enum LogLevelEnum {
    OFF("Off"),
    TRACE("Trace"),
    DEBUG("Debug"),
    INFO("Info"),
    WARN("Warn"),
    ERROR("Error");

    private String value;

    LogLevelEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static LogLevelEnum fromValue(String text) {
      for (LogLevelEnum b : LogLevelEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("logLevel")
  private LogLevelEnum logLevel = null;

  /**
   * Gets or Sets status
   */
  public enum StatusEnum {
    FAULTY("Faulty"),
    OFFLINE("Offline"),
    ONLINE("Online");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("status")
  private StatusEnum status = null;

  /**
   * Gets or Sets deployMode
   */
  public enum DeployModeEnum {
    PRODUCTIVE("Productive"),
    TEST("Test");

    private String value;

    DeployModeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static DeployModeEnum fromValue(String text) {
      for (DeployModeEnum b : DeployModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("deployMode")
  private DeployModeEnum deployMode = null;

  @JsonProperty("truststoreSettings")
  private TruststoreDesc truststoreSettings = null;

  @JsonProperty("proxySettings")
  private ProxyDesc proxySettings = null;

  @JsonProperty("keystoreSettings")
  private KeystoreDesc keystoreSettings = null;

  public ConfigurationDesc title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @Schema(description = "")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public ConfigurationDesc description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ConfigurationDesc connectorId(String connectorId) {
    this.connectorId = connectorId;
    return this;
  }

   /**
   * Get connectorId
   * @return connectorId
  **/
  @Schema(description = "")
  public String getConnectorId() {
    return connectorId;
  }

  public void setConnectorId(String connectorId) {
    this.connectorId = connectorId;
  }

   /**
   * Get defaultEndpoint
   * @return defaultEndpoint
  **/
  @Schema(description = "")
  public String getDefaultEndpoint() {
    return defaultEndpoint;
  }

   /**
   * Get version
   * @return version
  **/
  @Schema(description = "")
  public String getVersion() {
    return version;
  }

  public ConfigurationDesc curator(String curator) {
    this.curator = curator;
    return this;
  }

   /**
   * Get curator
   * @return curator
  **/
  @Schema(description = "")
  public String getCurator() {
    return curator;
  }

  public void setCurator(String curator) {
    this.curator = curator;
  }

  public ConfigurationDesc maintainer(String maintainer) {
    this.maintainer = maintainer;
    return this;
  }

   /**
   * Get maintainer
   * @return maintainer
  **/
  @Schema(description = "")
  public String getMaintainer() {
    return maintainer;
  }

  public void setMaintainer(String maintainer) {
    this.maintainer = maintainer;
  }

   /**
   * Get inboundModelVersion
   * @return inboundModelVersion
  **/
  @Schema(description = "")
  public List<String> getInboundModelVersion() {
    return inboundModelVersion;
  }

   /**
   * Get outboundModelVersion
   * @return outboundModelVersion
  **/
  @Schema(description = "")
  public String getOutboundModelVersion() {
    return outboundModelVersion;
  }

   /**
   * Get securityProfile
   * @return securityProfile
  **/
  @Schema(description = "")
  public SecurityProfileEnum getSecurityProfile() {
    return securityProfile;
  }

  public ConfigurationDesc logLevel(LogLevelEnum logLevel) {
    this.logLevel = logLevel;
    return this;
  }

   /**
   * Get logLevel
   * @return logLevel
  **/
  @Schema(description = "")
  public LogLevelEnum getLogLevel() {
    return logLevel;
  }

  public void setLogLevel(LogLevelEnum logLevel) {
    this.logLevel = logLevel;
  }

  public ConfigurationDesc status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public ConfigurationDesc deployMode(DeployModeEnum deployMode) {
    this.deployMode = deployMode;
    return this;
  }

   /**
   * Get deployMode
   * @return deployMode
  **/
  @Schema(description = "")
  public DeployModeEnum getDeployMode() {
    return deployMode;
  }

  public void setDeployMode(DeployModeEnum deployMode) {
    this.deployMode = deployMode;
  }

  public ConfigurationDesc truststoreSettings(TruststoreDesc truststoreSettings) {
    this.truststoreSettings = truststoreSettings;
    return this;
  }

   /**
   * Get truststoreSettings
   * @return truststoreSettings
  **/
  @Schema(description = "")
  public TruststoreDesc getTruststoreSettings() {
    return truststoreSettings;
  }

  public void setTruststoreSettings(TruststoreDesc truststoreSettings) {
    this.truststoreSettings = truststoreSettings;
  }

  public ConfigurationDesc proxySettings(ProxyDesc proxySettings) {
    this.proxySettings = proxySettings;
    return this;
  }

   /**
   * Get proxySettings
   * @return proxySettings
  **/
  @Schema(description = "")
  public ProxyDesc getProxySettings() {
    return proxySettings;
  }

  public void setProxySettings(ProxyDesc proxySettings) {
    this.proxySettings = proxySettings;
  }

  public ConfigurationDesc keystoreSettings(KeystoreDesc keystoreSettings) {
    this.keystoreSettings = keystoreSettings;
    return this;
  }

   /**
   * Get keystoreSettings
   * @return keystoreSettings
  **/
  @Schema(description = "")
  public KeystoreDesc getKeystoreSettings() {
    return keystoreSettings;
  }

  public void setKeystoreSettings(KeystoreDesc keystoreSettings) {
    this.keystoreSettings = keystoreSettings;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigurationDesc configurationDesc = (ConfigurationDesc) o;
    return Objects.equals(this.title, configurationDesc.title) &&
        Objects.equals(this.description, configurationDesc.description) &&
        Objects.equals(this.connectorId, configurationDesc.connectorId) &&
        Objects.equals(this.defaultEndpoint, configurationDesc.defaultEndpoint) &&
        Objects.equals(this.version, configurationDesc.version) &&
        Objects.equals(this.curator, configurationDesc.curator) &&
        Objects.equals(this.maintainer, configurationDesc.maintainer) &&
        Objects.equals(this.inboundModelVersion, configurationDesc.inboundModelVersion) &&
        Objects.equals(this.outboundModelVersion, configurationDesc.outboundModelVersion) &&
        Objects.equals(this.securityProfile, configurationDesc.securityProfile) &&
        Objects.equals(this.logLevel, configurationDesc.logLevel) &&
        Objects.equals(this.status, configurationDesc.status) &&
        Objects.equals(this.deployMode, configurationDesc.deployMode) &&
        Objects.equals(this.truststoreSettings, configurationDesc.truststoreSettings) &&
        Objects.equals(this.proxySettings, configurationDesc.proxySettings) &&
        Objects.equals(this.keystoreSettings, configurationDesc.keystoreSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, description, connectorId, defaultEndpoint, version, curator, maintainer, inboundModelVersion, outboundModelVersion, securityProfile, logLevel, status, deployMode, truststoreSettings, proxySettings, keystoreSettings);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigurationDesc {\n");
    
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    connectorId: ").append(toIndentedString(connectorId)).append("\n");
    sb.append("    defaultEndpoint: ").append(toIndentedString(defaultEndpoint)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    curator: ").append(toIndentedString(curator)).append("\n");
    sb.append("    maintainer: ").append(toIndentedString(maintainer)).append("\n");
    sb.append("    inboundModelVersion: ").append(toIndentedString(inboundModelVersion)).append("\n");
    sb.append("    outboundModelVersion: ").append(toIndentedString(outboundModelVersion)).append("\n");
    sb.append("    securityProfile: ").append(toIndentedString(securityProfile)).append("\n");
    sb.append("    logLevel: ").append(toIndentedString(logLevel)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    deployMode: ").append(toIndentedString(deployMode)).append("\n");
    sb.append("    truststoreSettings: ").append(toIndentedString(truststoreSettings)).append("\n");
    sb.append("    proxySettings: ").append(toIndentedString(proxySettings)).append("\n");
    sb.append("    keystoreSettings: ").append(toIndentedString(keystoreSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
