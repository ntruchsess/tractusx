/*
 * Dataspace Connector
 * IDS Connector originally developed by the Fraunhofer ISST
 *
 * OpenAPI spec version: 6.2.0
 * Contact: info@dataspace-connector.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package net.catenax.semantics.idsadapter.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonValue;

import io.swagger.v3.oas.annotations.media.Schema;
import net.catenax.semantics.idsadapter.client.model.TypedLiteral;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * AbstractConstraint
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-09-08T16:15:16.333286600+02:00[Europe/Berlin]")@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@type", visible = true )
@JsonSubTypes({
  @JsonSubTypes.Type(value = LogicalConstraint.class, name = "LogicalConstraint"),
  @JsonSubTypes.Type(value = Constraint.class, name = "Constraint"),
})

public class AbstractConstraint {
  @JsonProperty("properties")
  private Map<String, Object> properties = null;

  @JsonProperty("comment")
  private List<TypedLiteral> comment = null;

  @JsonProperty("label")
  private List<TypedLiteral> label = null;

  @JsonProperty("@id")
  private String _atId = null;

  @JsonTypeId
  private String _atType = null;

  public AbstractConstraint properties(Map<String, Object> properties) {
    this.properties = properties;
    return this;
  }

  public AbstractConstraint putPropertiesItem(String key, Object propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @Schema(description = "")
  public Map<String, Object> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, Object> properties) {
    this.properties = properties;
  }

  public AbstractConstraint comment(List<TypedLiteral> comment) {
    this.comment = comment;
    return this;
  }

  public AbstractConstraint addCommentItem(TypedLiteral commentItem) {
    if (this.comment == null) {
      this.comment = new ArrayList<>();
    }
    this.comment.add(commentItem);
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @Schema(description = "")
  public List<TypedLiteral> getComment() {
    return comment;
  }

  public void setComment(List<TypedLiteral> comment) {
    this.comment = comment;
  }

  public AbstractConstraint label(List<TypedLiteral> label) {
    this.label = label;
    return this;
  }

  public AbstractConstraint addLabelItem(TypedLiteral labelItem) {
    if (this.label == null) {
      this.label = new ArrayList<>();
    }
    this.label.add(labelItem);
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @Schema(description = "")
  public List<TypedLiteral> getLabel() {
    return label;
  }

  public void setLabel(List<TypedLiteral> label) {
    this.label = label;
  }

  public AbstractConstraint _atId(String _atId) {
    this._atId = _atId;
    return this;
  }

   /**
   * Get _atId
   * @return _atId
  **/
  @Schema(required = true, description = "")
  public String getAtId() {
    return _atId;
  }

  public void setAtId(String _atId) {
    this._atId = _atId;
  }

  public AbstractConstraint _atType(String _atType) {
    this._atType = _atType;
    return this;
  }

   /**
   * Get _atType
   * @return _atType
  **/
  @Schema(required = true, description = "")
  public String getAtType() {
    return _atType;
  }

  public void setAtType(String _atType) {
    this._atType = _atType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbstractConstraint abstractConstraint = (AbstractConstraint) o;
    return Objects.equals(this.properties, abstractConstraint.properties) &&
        Objects.equals(this.comment, abstractConstraint.comment) &&
        Objects.equals(this.label, abstractConstraint.label) &&
        Objects.equals(this._atId, abstractConstraint._atId) &&
        Objects.equals(this._atType, abstractConstraint._atType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(properties, comment, label, _atId, _atType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbstractConstraint {\n");
    
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    _atId: ").append(toIndentedString(_atId)).append("\n");
    sb.append("    _atType: ").append(toIndentedString(_atType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
