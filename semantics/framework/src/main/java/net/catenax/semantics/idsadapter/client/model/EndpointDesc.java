/*
 * Dataspace Connector
 * IDS Connector originally developed by the Fraunhofer ISST
 *
 * OpenAPI spec version: 6.2.0
 * Contact: info@dataspace-connector.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package net.catenax.semantics.idsadapter.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * EndpointDesc
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-09-08T16:15:16.333286600+02:00[Europe/Berlin]")@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true )
@JsonSubTypes({
  @JsonSubTypes.Type(value = ConnectorEndpointDesc.class, name = "ConnectorEndpointDesc"),
  @JsonSubTypes.Type(value = AppEndpointDesc.class, name = "AppEndpointDesc"),
  @JsonSubTypes.Type(value = GenericEndpointDesc.class, name = "GenericEndpointDesc"),
})

public class EndpointDesc implements OneOfapiEndpointsBody, OneOfendpointsIdBody {
  @JsonProperty("location")
  private String location = null;

  @JsonProperty("docs")
  private String docs = null;

  @JsonProperty("info")
  private String info = null;

  @JsonTypeId
  private String type = null;

  public EndpointDesc location(String location) {
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @Schema(description = "")
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }

  public EndpointDesc docs(String docs) {
    this.docs = docs;
    return this;
  }

   /**
   * Get docs
   * @return docs
  **/
  @Schema(description = "")
  public String getDocs() {
    return docs;
  }

  public void setDocs(String docs) {
    this.docs = docs;
  }

  public EndpointDesc info(String info) {
    this.info = info;
    return this;
  }

   /**
   * Get info
   * @return info
  **/
  @Schema(description = "")
  public String getInfo() {
    return info;
  }

  public void setInfo(String info) {
    this.info = info;
  }

  public EndpointDesc type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(required = true, description = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EndpointDesc endpointDesc = (EndpointDesc) o;
    return Objects.equals(this.location, endpointDesc.location) &&
        Objects.equals(this.docs, endpointDesc.docs) &&
        Objects.equals(this.info, endpointDesc.info) &&
        Objects.equals(this.type, endpointDesc.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(location, docs, info, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EndpointDesc {\n");
    
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    docs: ").append(toIndentedString(docs)).append("\n");
    sb.append("    info: ").append(toIndentedString(info)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
