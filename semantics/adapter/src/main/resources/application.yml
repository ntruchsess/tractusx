#
# Copyright (c) 2021-2022 T-Systems International GmbH
#
# See the AUTHORS file(s) distributed with this work for additional
# information regarding authorship.
#
# See the LICENSE file(s) distributed with this work for
# additional information regarding license terms.
#

###########################################################
# Configuration of the Simple Semantic Adapter Service
#    Connecting Backend Systems (Protocols/Commands) to Catena-X IDS
#    Providing Aspect Implementations = IDS Artifacts
#    Transforming Backend Data to Aspect Data
#    Registering Owned Digital Twins
###########################################################

---
#  Endpoint configuration for service provisioning and data pull
server:
  port: 4243
  ssl:
    key-store-password: __KEYSTOREPASSWORD__
    key-store: classpath:conf/__KEYSTOREFILENAME__.p12
    key-store-type: PKCS12
    key-alias: 1
    enabled: false
  forward-headers-strategy: framework
#security:
#  require-ssl: true
# This is the http transport we use to talk to the connector
http:
  timeout:
    write: 10000
    connect: 10000
    call: 10000
    read: 10000
licence_url: '@licence_url@'
spring:
  application:
    name: semantics-adapter
  banner:
    location: "classpath:banner.txt"
  # configuring the semantic services as a resource server and defining the corresponding IdP
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: https://catenaxdev042akssrv.germanywestcentral.cloudapp.azure.com/iamcentralidp/auth/realms/CX-Central
  # Builtin persistence for hosting models, twins & data
  sql:
    init:
      platform: h2
      mode: always
  datasource:
    driverClassName: org.h2.Driver
    password: tractusx
    username: tractusx
    url: jdbc:h2:file:./adapter/persistence
  jpa:
    hibernate:
      ddl-auto: update
# Configuration of http-endpoint host
  servlet:
    multipart:
      enabled: true
      max-file-size: 200MB
      max-request-size: 215MB
      file-size-threshold: 2KB
# Builtin persistence console
  h2:
    console:
      path: /admin/database
      enabled: true
      settings:
        web-allow-others: true
# How to deal with REST representation problems
  jackson:
    deserialization:
      fail-on-unknown-properties: true
title: '@project.name@'
springdoc:
  swagger-ui:
    path: /admin/api
project_desc: '@project.description@'
contact_email: '@email@'
licence: '@licence_name@'
contact_url: '@project.url@'
organization_name: '@project.organization.name@'
version: '@project.version@'
management:
  endpoint:
    info:
      enabled: true
    health:
      enabled: true
  endpoints:
    enabled-by-default: false
    web:
      exposure:
        include: info,health
    
#
# Configuration of the Semantic Adapter
#

idsadapter:
  #
  # Part 1 - Connection to IDS/Catena-X
  # with catalogs and contracts
  #
  connectorType: DSC
  connectorId: https://w3id.org/idsa/autogen/connectorEndpoint/a73d2202-cb77-41db-a3a6-05ed251c0b
  connectorUrl: http://localhost:8080
  connectorUser: admin
  connectorPassword: password
  publisher: http://t-systems.com
  # our callback address exposed
  serviceUrl: http://localhost:4242
  adapterUrl: http://localhost:4243/api/v1
  callbackPattern: "%1$s/%2$s/download?offer=%3$s&representation=%4$s&artifact=%5$s"
  portalUrl: http://localhost:3000
  # Under which catalogs do we publish our data offerings?
  catalogs:
    "[urn:catalog:catenax]":
      description: Catena-X Data Offering Catalog
  # Under which conditions and to whom do we publish our data offerings
  contracts:
    contract-readall:
      description: A sample contract with a consumer that may read everything.
      # this is the ID of the "consuming" semantic data connector
      consumer: "https://w3id.org/idsa/autogen/baseConnector/\
         7b934432-a85e-41c5-0000-669219dde4ea"
      start: 2021-01-01T18:35:29.921Z
      end: 2021-12-31T07:11:13.569Z
      rules:
        rule1:
          description: >
             Sample read all permission.
             Due to a connector ?bug?, action field must stay empty.
          value: "{ \"@type\":\"ids:Permission\", \"ids:action\":[] }"
  #
  # Part 2 - IDS Offer/Representation/Artifact Provisioning + Aspect Implementation
  #
  offers:
    # A first data offer represented by static files dumped out of a PLM system
    offer-windchill:
      description: Sample PLM offering representing by static files.
      license: https://www.apache.org/licenses/LICENSE-2.0.html
      language: EN
      # reference to the contract
      contract: contract-readall
      # reference to the catalogue
      catalog: "urn:catalog:catenax"
      paymentMethod: free
      # The representations correspond to aspects/semantic models supported
      representations:
        material-aspect:
          description: Sample Static Material Aspect.
          mediaType: application/json
          model: urn:bamm:com.catenaX:0.0.1#Material
          language: EN
          # The various artifacts of material
          artifacts:
            brake:
              description: Sample File Source
              protocol: FILE
              command: brake-file
        bom-aspect:
          description: Sample BOM Aspect.
          mediaType: application/json
          model: urn:bamm:com.catenaX:0.0.1#Traceability
          language: EN
          # The sources/artifacts of BOM
          artifacts:
            brake:
              description: Sample File Source
              protocol: FILE
              command: brake-file
    # A second data offer represented by a database backend systems (here: Catena-X Test Data)
    offer-tdm:
      description: Test Data from Catena-X.
      license: https://www.apache.org/licenses/LICENSE-2.0.html
      language: EN
      # reference to the contract
      contract: contract-readall
      # reference to the catalog
      catalog: "urn:catalog:catenax"
      paymentMethod: free
      # The representations correspond to all Speedboat aspects/semantic models
      representations:
        material-aspect:
          description: Catena-X Material Aspect.
          mediaType: application/json
          model: urn:bamm:com.catenaX:0.0.1#Material
          language: EN
          artifacts:
            material-vehicle:
              description: Sample Material Database.
              protocol: SQL
              command: material-sql
        bom-aspect:
          description: Catena-X Traceability Aspect.
          mediaType: application/json
          model: urn:bamm:com.catenaX:0.0.1#Traceability
          language: EN
          artifacts:
            bom-vehicle:
              description: Test Traceability Database.
              protocol: SQL
              command: bom-sql
  #
  # Part 3 - Define Transformations from Backend data to Aspect data
  #
  transformations:
    xml2xml:
      file: classpath:xml2xml.xsl
      sourceModel: http://pwc.t-systems.com/datamodel/common
      targetMediaType: text/xml
      targetModel: https://www.w3.org/TR/REC-xml/
    dcx2bom:
      file: classpath:dcx2bom.xsl
      sourceModel: http://pwc.t-systems.com/datamodel/common
      targetMediaType: application/json
      targetModel: urn:bamm:com.catenaX:0.0.1#Traceability
    dxc2material:
      file: classpath:dcx2material.xsl
      sourceModel: http://pwc.t-systems.com/datamodel/common
      targetMediaType: application/json
      targetModel: urn:bamm:com.catenaX:0.0.1#Material
    dcx2twin:
      file: classpath:dcx2twin.xsl
      sourceModel: http://pwc.t-systems.com/datamodel/common
      targetMediaType: application/json
      targetModel: urn:com.catenaX.semantics:1.2.0-SNAPSHOT#DigitialTwins
    sql2bom:
      file: classpath:sql2bom.xsl
      sourceModel: urn:com:tsystems:DataSet
      targetMediaType: application/json
      targetModel: urn:bamm:com.catenaX:0.0.1#Traceability
    sql2material:
      file: classpath:sql2material.xsl
      sourceModel: urn:com:tsystems:DataSet
      targetMediaType: application/json
      targetModel: urn:bamm:com.catenaX:0.0.1#Material
    sql2twins:
      file: classpath:sql2twins.xsl
      sourceModel: urn:com:tsystems:DataSet
      targetMediaType: application/json
      targetModel: urn:com.catenaX.semantics:1.2.0-SNAPSHOT#DigitialTwins
  transformationParameters:
    "[SERVICE_URL]": ${idsadapter.serviceUrl}
    "[ADAPTER_URL]": ${idsadapter.adapterUrl}
    "[CONNECTOR_ID]": ${idsadapter.connectorId}
    "[PORTAL_URL]": ${idsadapter.portalUrl}
  #
  # Part 4 - Configure Backend Protocol/Commands
  #
  commands:
    brake-file:
      file: classpath:Bremse_Windchill.xml
      model: http://pwc.t-systems.com/datamodel/common
    material-sql:
      aliases:
        material: |
           WITH RECURSIVE materialtree(id,parent,material_name, material_type,aggregate_state, chemical_composition_fraction,weight,owner,owner_type,level) AS (
               SELECT id,
                 parent,
                     material_name,
                     material_type,
                     aggregate_state,
                     chemical_composition_fraction,
                     weight,
                     owner,
                     owner_type,
                     0 as level
               FROM material
                WHERE owner LIKE '%{manufacturer}%' 
                 AND owner_type = '{number}'
                 AND parent IS NULL
               UNION ALL
               SELECT material.id,
                     material.parent,
                     material.material_name,
                     material.material_type,
                     material.aggregate_state,
                     material.chemical_composition_fraction,
                     material.weight,material.owner,
                     material.owner_type,
                     materialtree.level+1 as level
               FROM materialtree
               JOIN material
               ON material.parent = materialtree.id
               )
               SELECT id,
                     parent,
                     material_name, 
                     material_type, 
                     aggregate_state, 
                     REPLACE(chemical_composition_fraction,',','.') AS chemical_composition_fraction, 
                     REPLACE(weight,',','.') AS weight,
                     owner,
                     owner_type,level 
               FROM materialtree
    bom-sql:
      aliases:
        bom: |
                   WITH RECURSIVE bom(parentId,
                            partStaticData_manufacturerOneId,
                            partStaticData_manufactureContractOneId,
                            partStaticData_partNameManufacturer,
                            partStaticData_partNumberManufacturer,
                            partStaticData_customerOneID,
                            partStaticData_customerContractOneID,
                            partStaticData_partNameCustomer,
                            partStaticData_partNumberCustomer,
                            partUniqueData_uniqueID,
                            partUniqueData_manufacturerUniqueID,
                            partUniqueData_customerUniqueID,
                            partIndividualData_productionCountryCode,
                            partIndividualData_productionDateGMT,
                            twinData_uuid,
                            level) 
                   AS (
                     SELECT traceability.*, 
                            0 AS level 
                       FROM traceability 
                      WHERE partStaticData_manufacturerOneId LIKE '%{manufacturer}%' 
                        AND partUniqueData_manufacturerUniqueId = '{serial}'
                     UNION ALL 
                    SELECT traceability.*,
                           bom.level+1 as level
                      FROM bom 
                      JOIN traceability ON traceability.parentId = bom.partUniqueData_uniqueId 
                   ) 
                   SELECT bom.parentId,
                          bom.partStaticData_manufacturerOneId,
                          bom.partStaticData_manufactureContractOneId,
                          bom.partStaticData_partNameManufacturer,
                          bom.partStaticData_partNumberManufacturer,
                          bom.partStaticData_customerOneID,
                          bom.partStaticData_customerContractOneID,
                          bom.partStaticData_partNameCustomer,
                          bom.partStaticData_partNumberCustomer,
                          bom.partUniqueData_uniqueID,
                          bom.partUniqueData_manufacturerUniqueID,
                          bom.partUniqueData_customerUniqueID,
                          bom.partIndividualData_productionCountryCode,
                          bom.partIndividualData_productionDateGMT,
                          bom.twinData_uuid AS twinData_uuid,
                          bom.level 
                     FROM bom
    twin-sql:
      aliases:
        parts: |
          SELECT partStaticData_partNameCustomer AS description, 
                 SUBSTRING(partStaticData_customerOneId,2,LENGTH(partStaticData_customerOneId)-2) AS customer, 
                 partStaticData_partNumberCustomer AS customerNumber, 
                 SUBSTRING(partStaticData_manufacturerOneId,2,LENGTH(partStaticData_manufacturerOneId)-2) AS manufacturer, 
                 partUniqueData_manufacturerUniqueId AS partSerial, 
                 partStaticData_partNumberManufacturer AS partNumber, 
                 twinData_uuid AS uuid 
            FROM traceability
  #
  # Part 5 - Automated Twin Sources
  #
twinSources:
  -
    protocol: FILE
    command: brake-file
    parameters:
  -
    protocol: SQL
    command: twin-sql
    parameters: